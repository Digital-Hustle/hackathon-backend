CREATE TABLE IF NOT EXISTS tns_energy.users
(
    id       INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(50)  NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS tns_energy.profile
(
    id         INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id    INTEGER NOT NULL UNIQUE,
    history_id INTEGER UNIQUE
);

CREATE TABLE IF NOT EXISTS tns_energy.history
(
    id         INTEGER PRIMARY KEY,
    profile_id BIGINT NOT NULL UNIQUE
);

ALTER TABLE tns_energy.profile
    ADD CONSTRAINT fk_profile_user
        FOREIGN KEY (user_id) REFERENCES tns_energy.users (id) ON DELETE CASCADE;

ALTER TABLE tns_energy.profile
    ADD CONSTRAINT fk_profile_history
        FOREIGN KEY (history_id) REFERENCES tns_energy.history (id) ON DELETE SET NULL;

ALTER TABLE tns_energy.history
    ADD CONSTRAINT fk_history_profile
        FOREIGN KEY (profile_id) REFERENCES tns_energy.profile (id) ON DELETE CASCADE;

CREATE TABLE IF NOT EXISTS tns_energy.report
(
    id         INTEGER PRIMARY KEY,
    data       BYTEA  NOT NULL,
    history_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (history_id) REFERENCES tns_energy.history (id) ON DELETE CASCADE
);

CREATE TABLE if not exists tns_energy.hourly_data
(
    id     INTEGER PRIMARY KEY,
    day    INTEGER         NOT NULL CHECK (day BETWEEN 1 AND 31),
    hour   INTEGER         NOT NULL CHECK (hour BETWEEN 0 AND 23),
    volume DECIMAL(15, 13) NOT NULL
);

CREATE TABLE IF NOT EXISTS tns_energy.users_roles
(
    user_id INTEGER     NOT NULL,
    role    VARCHAR(20) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES tns_energy.users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role)
);
